// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownedRooms    Room[]        @relation("RoomOwner")
  roomMembers   RoomMember[]
  messages      Message[]
  joinRequests  JoinRequest[]
  userStatus    UserStatus?

  @@map("users")
}

model Room {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  autoJoin    Boolean  @default(false)
  inviteCode  String   @unique @default(cuid())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner        User          @relation("RoomOwner", fields: [ownerId], references: [id])
  members      RoomMember[]
  messages     Message[]
  joinRequests JoinRequest[]

  @@map("rooms")
}

model RoomMember {
  id       String           @id @default(cuid())
  userId   String
  roomId   String
  status   RoomMemberStatus @default(ACTIVE)
  joinedAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
  @@map("room_members")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  userId    String
  roomId    String
  createdAt DateTime    @default(now())

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@map("messages")
}

model JoinRequest {
  id        String            @id @default(cuid())
  userId    String
  roomId    String
  status    JoinRequestStatus @default(PENDING)
  message   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
  @@map("join_requests")
}

model UserStatus {
  id          String           @id @default(cuid())
  userId      String           @unique
  status      OnlineStatus     @default(OFFLINE)
  lastSeen    DateTime         @default(now())
  customStatus String?
  updatedAt   DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_status")
}

enum RoomMemberStatus {
  ACTIVE
  KICKED
  BANNED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OnlineStatus {
  ONLINE
  AWAY
  BUSY
  OFFLINE
}
